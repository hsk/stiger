
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Nov 13 23:10:53 JST 2010
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Sat Nov 13 23:10:53 JST 2010
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\007\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\004\005\000\002\004\006\000\002" +
    "\004\006\000\002\004\010\000\002\004\006\000\002\004" +
    "\012\000\002\004\006\000\002\004\007\000\002\004\011" +
    "\000\002\004\010\000\002\004\006\000\002\005\005\000" +
    "\002\005\003\000\002\006\002\000\002\006\005\000\002" +
    "\006\003\000\002\007\002\000\002\007\007\000\002\007" +
    "\005\000\002\010\002\000\002\010\004\000\002\011\006" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\005\000\002\012\005\000\002\013\003\000\002" +
    "\014\002\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\016\006\000\002\016\010\000\002\017\011" +
    "\000\002\017\013\000\002\020\003\000\002\020\005\000" +
    "\002\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\070\002\uffff\007\uffff\011\uffff\013\uffff\015" +
    "\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\040\uffff\041\uffff\044\uffff\045\uffff\047\uffff\050\uffff" +
    "\054\uffff\055\uffff\056\uffff\001\002\000\102\002\uffc6\007" +
    "\uffc6\011\uffc6\012\173\013\uffc6\014\uffc6\015\uffc6\016\172" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\004" +
    "\004\017\001\002\000\070\002\ufffd\007\ufffd\011\ufffd\013" +
    "\ufffd\015\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\040\ufffd\041\ufffd\044\ufffd\045\ufffd\047\ufffd" +
    "\050\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\034\002" +
    "\000\021\033\022\025\023\040\024\027\025\032\026\031" +
    "\027\041\030\034\031\035\032\030\033\026\034\042\001" +
    "\002\000\004\002\162\001\002\000\076\002\ufffa\007\ufffa" +
    "\011\ufffa\013\ufffa\014\151\015\ufffa\017\ufffa\020\153\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\152\040" +
    "\ufffa\041\ufffa\044\ufffa\045\ufffa\047\ufffa\050\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\070\002\ufffc\007\ufffc\011" +
    "\ufffc\013\ufffc\015\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\040\ufffc\041\ufffc\044\ufffc\045\ufffc" +
    "\047\ufffc\050\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\030\004\017\005\015\006\006\012\021\022\004\037\016" +
    "\042\005\043\010\046\020\052\022\053\011\001\002\000" +
    "\104\002\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040\uffcf\041" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\001\002\000\012\047\uffd7\054\070\055\064\056" +
    "\071\001\002\000\032\004\017\005\015\006\006\012\021" +
    "\013\024\022\004\037\016\042\005\043\010\046\020\052" +
    "\022\053\011\001\002\000\070\002\ufffb\007\ufffb\011\ufffb" +
    "\013\ufffb\015\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\040\ufffb\041\ufffb\044\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\036" +
    "\011\037\013\036\021\033\022\025\023\040\024\027\025" +
    "\032\026\031\027\041\030\034\031\035\032\030\033\026" +
    "\034\042\001\002\000\070\002\ufffe\007\ufffe\011\ufffe\013" +
    "\ufffe\015\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\047\ufffe" +
    "\050\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\070\002" +
    "\uffea\007\uffea\011\uffea\013\uffea\015\uffea\017\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\040\uffea\041\uffea" +
    "\044\uffea\045\uffea\047\uffea\050\uffea\054\uffea\055\uffea\056" +
    "\uffea\001\002\000\030\004\017\005\015\006\006\012\021" +
    "\022\004\037\016\042\005\043\010\046\020\052\022\053" +
    "\011\001\002\000\030\004\017\005\015\006\006\012\021" +
    "\022\004\037\016\042\005\043\010\046\020\052\022\053" +
    "\011\001\002\000\030\004\017\005\015\006\006\012\021" +
    "\022\004\037\016\042\005\043\010\046\020\052\022\053" +
    "\011\001\002\000\030\004\017\005\015\006\006\012\021" +
    "\022\004\037\016\042\005\043\010\046\020\052\022\053" +
    "\011\001\002\000\070\002\ufff7\007\ufff7\011\ufff7\013\ufff7" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7\050" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\070\002\ufff4" +
    "\007\ufff4\011\ufff4\013\ufff4\015\ufff4\017\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\040\ufff4\041\ufff4\044" +
    "\ufff4\045\ufff4\047\ufff4\050\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\001\002\000\070\002\uffed\007\uffed\011\uffed\013\uffed\015" +
    "\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\040\uffed\041\uffed\044\uffed\045\uffed\047\uffed\050\uffed" +
    "\054\uffed\055\uffed\056\uffed\001\002\000\040\011\051\013" +
    "\uffde\021\033\022\025\023\040\024\027\025\032\026\031" +
    "\027\041\030\034\031\035\032\030\033\026\034\042\050" +
    "\uffde\001\002\000\004\013\050\001\002\000\070\002\ufff8" +
    "\007\ufff8\011\ufff8\013\ufff8\015\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8\044" +
    "\ufff8\045\ufff8\047\ufff8\050\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\001\002\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\006\013\uffdf\050\uffdf\001\002\000\070\002" +
    "\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\040\ufff2\041\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\050\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\001\002\000\070\002\ufff3\007\ufff3\011\ufff3\013\ufff3" +
    "\015\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3\050" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\070\002\uffef" +
    "\007\uffef\011\uffef\013\uffef\015\uffef\017\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\040\uffef\041\uffef\044" +
    "\uffef\045\uffef\047\uffef\050\uffef\054\uffef\055\uffef\056\uffef" +
    "\001\002\000\070\002\ufff5\007\ufff5\011\ufff5\013\ufff5\015" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\001\002\000\070\002\ufff0\007" +
    "\ufff0\011\ufff0\013\ufff0\015\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\047\ufff0\050\ufff0\054\ufff0\055\ufff0\056\ufff0\001" +
    "\002\000\070\002\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\040\ufff1\041\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\001\002\000\070\002\uffec\007\uffec" +
    "\011\uffec\013\uffec\015\uffec\017\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\040\uffec\041\uffec\044\uffec\045" +
    "\uffec\047\uffec\050\uffec\054\uffec\055\uffec\056\uffec\001\002" +
    "\000\070\002\ufff6\007\ufff6\011\ufff6\013\ufff6\015\ufff6\017" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\040" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\001\002\000\070\002\uffee\007\uffee\011" +
    "\uffee\013\uffee\015\uffee\017\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\040\uffee\041\uffee\044\uffee\045\uffee" +
    "\047\uffee\050\uffee\054\uffee\055\uffee\056\uffee\001\002\000" +
    "\004\004\017\001\002\000\012\047\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\001\002\000\004\047\126\001\002\000\012\047" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000\004\004\017" +
    "\001\002\000\004\004\017\001\002\000\012\047\uffd7\054" +
    "\070\055\064\056\071\001\002\000\004\047\uffd6\001\002" +
    "\000\004\025\075\001\002\000\010\004\017\016\077\036" +
    "\101\001\002\000\012\047\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\001\002\000\006\004\017\017\uffce\001\002\000\012\047" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000\004\051\102" +
    "\001\002\000\004\004\017\001\002\000\012\047\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\001\002\000\004\017\113\001\002" +
    "\000\010\007\111\013\uffcc\017\uffcc\001\002\000\004\010" +
    "\107\001\002\000\004\004\017\001\002\000\010\007\uffcb" +
    "\013\uffcb\017\uffcb\001\002\000\010\004\017\013\uffce\017" +
    "\uffce\001\002\000\006\013\uffcd\017\uffcd\001\002\000\012" +
    "\047\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\004\012" +
    "\115\001\002\000\006\004\017\013\uffce\001\002\000\004" +
    "\013\117\001\002\000\006\010\121\025\120\001\002\000" +
    "\030\004\017\005\015\006\006\012\021\022\004\037\016" +
    "\042\005\043\010\046\020\052\022\053\011\001\002\000" +
    "\004\004\017\001\002\000\004\025\123\001\002\000\030" +
    "\004\017\005\015\006\006\012\021\022\004\037\016\042" +
    "\005\043\010\046\020\052\022\053\011\001\002\000\042" +
    "\021\033\022\025\023\040\024\027\025\032\026\031\027" +
    "\041\030\034\031\035\032\030\033\026\034\042\047\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\001\002\000\042\021\033\022" +
    "\025\023\040\024\027\025\032\026\031\027\041\030\034" +
    "\031\035\032\030\033\026\034\042\047\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\001\002\000\032\004\017\005\015\006\006" +
    "\012\021\022\004\037\016\042\005\043\010\046\020\050" +
    "\130\052\022\053\011\001\002\000\036\011\131\021\033" +
    "\022\025\023\040\024\027\025\032\026\031\027\041\030" +
    "\034\031\035\032\030\033\026\034\042\050\132\001\002" +
    "\000\070\002\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040" +
    "\uffe4\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\001\002\000\030\004\017\005\015\006" +
    "\006\012\021\022\004\037\016\042\005\043\010\046\020" +
    "\052\022\053\011\001\002\000\070\002\uffe3\007\uffe3\011" +
    "\uffe3\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000" +
    "\004\050\134\001\002\000\070\002\uffe2\007\uffe2\011\uffe2" +
    "\013\uffe2\015\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\040\uffe2\041\uffe2\044\uffe2\045\uffe2\047" +
    "\uffe2\050\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\006" +
    "\010\136\035\137\001\002\000\004\004\017\001\002\000" +
    "\030\004\017\005\015\006\006\012\021\022\004\037\016" +
    "\042\005\043\010\046\020\052\022\053\011\001\002\000" +
    "\042\021\033\022\025\023\040\024\027\025\032\026\031" +
    "\027\041\030\034\031\035\032\030\033\026\034\042\047" +
    "\uffca\054\uffca\055\uffca\056\uffca\001\002\000\004\035\142" +
    "\001\002\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\042\021\033\022\025\023\040\024\027\025" +
    "\032\026\031\027\041\030\034\031\035\032\030\033\026" +
    "\034\042\047\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000" +
    "\034\021\033\022\025\023\040\024\027\025\032\026\031" +
    "\027\041\030\034\031\035\032\030\033\026\034\042\040" +
    "\145\001\002\000\030\004\017\005\015\006\006\012\021" +
    "\022\004\037\016\042\005\043\010\046\020\052\022\053" +
    "\011\001\002\000\070\002\uffe8\007\uffe8\011\uffe8\013\uffe8" +
    "\015\uffe8\017\uffe8\021\033\022\025\023\040\024\027\025" +
    "\032\026\031\027\041\030\034\031\035\032\030\033\026" +
    "\034\042\040\uffe8\041\147\044\uffe8\045\uffe8\047\uffe8\050" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\030\004\017" +
    "\005\015\006\006\012\021\022\004\037\016\042\005\043" +
    "\010\046\020\052\022\053\011\001\002\000\070\002\uffe7" +
    "\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\033\022" +
    "\025\023\040\024\027\025\032\026\031\027\041\030\034" +
    "\031\035\032\030\033\026\034\042\040\uffe7\041\uffe7\044" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\001\002\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\030\004\017\005\015\006\006\012\021\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\004\004\017\001\002\000\076\002\uffc5\007" +
    "\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\040\uffc5\041\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\001\002\000\070\002\ufff9\007\ufff9" +
    "\011\ufff9\013\ufff9\015\ufff9\017\ufff9\021\033\022\025\023" +
    "\040\024\027\025\032\026\031\027\041\030\034\031\035" +
    "\032\030\033\026\034\042\040\ufff9\041\ufff9\044\ufff9\045" +
    "\ufff9\047\ufff9\050\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002" +
    "\000\034\015\157\021\033\022\025\023\040\024\027\025" +
    "\032\026\031\027\041\030\034\031\035\032\030\033\026" +
    "\034\042\001\002\000\100\002\uffc4\007\uffc4\011\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4" +
    "\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051\160\054\uffc4\055" +
    "\uffc4\056\uffc4\001\002\000\030\004\017\005\015\006\006" +
    "\012\021\022\004\037\016\042\005\043\010\046\020\052" +
    "\022\053\011\001\002\000\070\002\uffe1\007\uffe1\011\uffe1" +
    "\013\uffe1\015\uffe1\017\uffe1\021\033\022\025\023\040\024" +
    "\027\025\032\026\031\027\041\030\034\031\035\032\030" +
    "\033\026\034\042\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047" +
    "\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\004" +
    "\002\001\001\002\000\004\035\164\001\002\000\030\004" +
    "\017\005\015\006\006\012\021\022\004\037\016\042\005" +
    "\043\010\046\020\052\022\053\011\001\002\000\034\021" +
    "\033\022\025\023\040\024\027\025\032\026\031\027\041" +
    "\030\034\031\035\032\030\033\026\034\042\044\166\001" +
    "\002\000\030\004\017\005\015\006\006\012\021\022\004" +
    "\037\016\042\005\043\010\046\020\052\022\053\011\001" +
    "\002\000\034\021\033\022\025\023\040\024\027\025\032" +
    "\026\031\027\041\030\034\031\035\032\030\033\026\034" +
    "\042\045\170\001\002\000\030\004\017\005\015\006\006" +
    "\012\021\022\004\037\016\042\005\043\010\046\020\052" +
    "\022\053\011\001\002\000\070\002\uffe5\007\uffe5\011\uffe5" +
    "\013\uffe5\015\uffe5\017\uffe5\021\033\022\025\023\040\024" +
    "\027\025\032\026\031\027\041\030\034\031\035\032\030" +
    "\033\026\034\042\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047" +
    "\uffe5\050\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\006" +
    "\004\017\017\uffda\001\002\000\032\004\017\005\015\006" +
    "\006\012\021\013\uffdd\022\004\037\016\042\005\043\010" +
    "\046\020\052\022\053\011\001\002\000\036\007\177\013" +
    "\uffdb\021\033\022\025\023\040\024\027\025\032\026\031" +
    "\027\041\030\034\031\035\032\030\033\026\034\042\001" +
    "\002\000\004\013\176\001\002\000\070\002\uffe9\007\uffe9" +
    "\011\uffe9\013\uffe9\015\uffe9\017\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\040\uffe9\041\uffe9\044\uffe9\045" +
    "\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002" +
    "\000\032\004\017\005\015\006\006\012\021\013\uffdd\022" +
    "\004\037\016\042\005\043\010\046\020\052\022\053\011" +
    "\001\002\000\004\013\uffdc\001\002\000\004\017\207\001" +
    "\002\000\004\025\203\001\002\000\030\004\017\005\015" +
    "\006\006\012\021\022\004\037\016\042\005\043\010\046" +
    "\020\052\022\053\011\001\002\000\036\007\205\017\uffd8" +
    "\021\033\022\025\023\040\024\027\025\032\026\031\027" +
    "\041\030\034\031\035\032\030\033\026\034\042\001\002" +
    "\000\006\004\017\017\uffda\001\002\000\004\017\uffd9\001" +
    "\002\000\070\002\uffe0\007\uffe0\011\uffe0\013\uffe0\015\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\034\021\033\022\025" +
    "\023\040\024\027\025\032\026\031\027\041\030\034\031" +
    "\035\032\030\033\026\034\042\045\211\001\002\000\030" +
    "\004\017\005\015\006\006\012\021\022\004\037\016\042" +
    "\005\043\010\046\020\052\022\053\011\001\002\000\070" +
    "\002\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6\021" +
    "\033\022\025\023\040\024\027\025\032\026\031\027\041" +
    "\030\034\031\035\032\030\033\026\034\042\040\uffe6\041" +
    "\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\070\002\uffeb\007\uffeb\011\uffeb\013" +
    "\uffeb\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb" +
    "\050\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\012\003\012\004\011\013\006\020\013\001" +
    "\001\000\010\004\212\013\006\020\013\001\001\000\010" +
    "\004\207\013\006\020\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\143\013\006\020\013\001\001" +
    "\000\002\001\001\000\012\010\065\011\071\016\064\017" +
    "\066\001\001\000\010\004\022\013\006\020\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\062\013\006\020\013\001\001\000\010\004\061" +
    "\013\006\020\013\001\001\000\010\004\060\013\006\020" +
    "\013\001\001\000\010\004\057\013\006\020\013\001\001" +
    "\000\010\004\056\013\006\020\013\001\001\000\010\004" +
    "\055\013\006\020\013\001\001\000\010\004\054\013\006" +
    "\020\013\001\001\000\010\004\053\013\006\020\013\001" +
    "\001\000\010\004\052\013\006\020\013\001\001\000\002" +
    "\001\001\000\012\004\045\005\046\013\006\020\013\001" +
    "\001\000\010\004\044\013\006\020\013\001\001\000\010" +
    "\004\043\013\006\020\013\001\001\000\010\004\042\013" +
    "\006\020\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\045\005\051\013\006\020\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\113\001" +
    "\001\000\004\013\073\001\001\000\012\010\072\011\071" +
    "\016\064\017\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\075\013\077\001\001\000\002\001\001" +
    "\000\010\013\105\014\103\015\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\107\001\001\000\002\001\001\000\010" +
    "\013\105\014\111\015\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\105\014\115" +
    "\015\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\124\013\006\020\013\001\001\000\004\013\121" +
    "\001\001\000\002\001\001\000\010\004\123\013\006\020" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\126\013\006\020\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\045\005\132\013\006\020\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\140\001\001\000\010" +
    "\004\137\013\006\020\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\142\013\006\020\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\145\013" +
    "\006\020\013\001\001\000\002\001\001\000\010\004\147" +
    "\013\006\020\013\001\001\000\002\001\001\000\010\004" +
    "\155\013\006\020\013\001\001\000\010\004\154\013\006" +
    "\020\013\001\001\000\004\013\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\160\013\006\020\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\164" +
    "\013\006\020\013\001\001\000\002\001\001\000\010\004" +
    "\166\013\006\020\013\001\001\000\002\001\001\000\010" +
    "\004\170\013\006\020\013\001\001\000\002\001\001\000" +
    "\006\007\200\013\201\001\001\000\012\004\173\006\174" +
    "\013\006\020\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\173\006\177\013\006" +
    "\020\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\203\013\006\020\013\001\001" +
    "\000\002\001\001\000\006\007\205\013\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\211\013\006\020\013\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {


/*
	static Symbol.Symbol sym(String s) {
		return Symbol.Symbol.symbol(s);
	}
	*/
	public int P() { return 0; }

  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // l_value ::= l_value LBRACK exp RBRACK 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.SubscriptVar(
			(Absyn.Var)_1,
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*l_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // l_value ::= l_value DOT id 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.FieldVar(
			(Absyn.Var)_1,
			(scala.Symbol)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*l_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // l_value ::= id 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.SimpleVar(
			(scala.Symbol)_1,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*l_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fundec ::= FUNCTION id LPAREN tyfields RPAREN COLON id EQ exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _7 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _9left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _9right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _9 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.FunctionDec(
			(scala.Symbol)_2,
			(scala.List<Absyn.TyField>)_4,
			(scala.Symbol)_7,
			(Absyn.Exp)_9,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fundec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fundec ::= FUNCTION id LPAREN tyfields RPAREN EQ exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _7 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.FunctionDec(
			(scala.Symbol)_2,
			(scala.List<Absyn.TyField>)_4,
			(scala.Symbol)null,
			(Absyn.Exp)_7,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fundec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vardec ::= VAR id COLON id ASSIGN exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _6 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.VarDec(
			(scala.Symbol)_2,
			false,
			(scala.Symbol)_4,
			(Absyn.Exp)_6,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*vardec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vardec ::= VAR id ASSIGN exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.VarDec(
			(scala.Symbol)_2,
			false,
			(scala.Symbol)null,
			(Absyn.Exp)_4,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*vardec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tyfield ::= id COLON id 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.TyField(
			false,
			(scala.Symbol)_1,
			new Absyn.NameTy(
				(scala.Symbol)_3,
				P()
			),
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*tyfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tyfields ::= tyfield 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.list(
			(Absyn.TyField)_1
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*tyfields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tyfields ::= tyfield COMMA tyfields 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.addList(
			(Absyn.TyField)_1,
			(scala.List<Absyn.TyField>)_3
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*tyfields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tyfields ::= 
            {
              Object RESULT = null;
		
		RESULT = Absyn.listTyFields();
	
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*tyfields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // id ::= ID 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new scala.Symbol(
			_1
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*id*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ty ::= ARRAY OF id 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.ArrayTy(
			(scala.Symbol)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ty ::= LBRACE tyfields RBRACE 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.RecordTy(
			(scala.List<Absyn.TyField>)_2,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ty ::= id 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.NameTy(
			(scala.Symbol)_1,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= fundec 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = (Absyn.Dec)_1;
	
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec ::= vardec 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = (Absyn.Dec)_1;
	
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec ::= TYPE id EQ ty 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.TypeDec(
			(scala.Symbol)_2,
			(Absyn.Ty)_4,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decs ::= dec decs 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.addList(
			(Absyn.Dec)_1,
			(scala.List<Absyn.Dec>)_2
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decs*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decs ::= 
            {
              Object RESULT = null;
		
		RESULT = Absyn.listDec();
	
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decs*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rec_fields ::= id EQ exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.list(
			new scala.Tuple2<scala.Symbol, Absyn.Exp>(
				(scala.Symbol)_1,
				(Absyn.Exp)_3
			)
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*rec_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rec_fields ::= id EQ exp COMMA rec_fields 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.addList(
			new scala.Tuple2<scala.Symbol, Absyn.Exp>(
				(scala.Symbol)_1,
				(Absyn.Exp)_3
			),
			(scala.List<scala.Tuple2<scala.Symbol, Absyn.Exp>>)_5
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*rec_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rec_fields ::= 
            {
              Object RESULT = null;
		
		RESULT = Absyn.list();
	
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*rec_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // args ::= exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.list((Absyn.Exp)_1);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*args*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // args ::= exp COMMA args 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.addList(
			(Absyn.Exp)_1,
			(scala.List<Absyn.Exp>)_3
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*args*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // args ::= 
            {
              Object RESULT = null;
		
		RESULT = Absyn.list();
	
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*args*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // explist ::= exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.list((Absyn.Exp)_1);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*explist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // explist ::= exp SEMICOLON explist 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = Absyn.addList(
			(Absyn.Exp)_1,
			(scala.List<Absyn.Exp>)_3
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*explist*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= id LBRACE rec_fields RBRACE 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.RecordExp(
			(scala.List<scala.Tuple3<scala.Symbol,Absyn.Exp,Integer>>)_3,
			(scala.Symbol)_1,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= l_value LBRACK exp RBRACK OF exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _6 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.ArrayExp(
			(scala.Symbol)_1, 
			(Absyn.Exp)_3,
			(Absyn.Exp)_6,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= LET decs IN exp SEMICOLON explist END 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _6 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.LetExp(
			(scala.List<Absyn.Dec>)_2,
			new Absyn.SeqExp(
				Absyn.addList(
					(Absyn.Exp)_4,
					(scala.List<Absyn.Exp>)_6
				),
				P()
			),
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= LET decs IN exp END 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.LetExp(
			(scala.List<Absyn.Dec>)_2,
			(Absyn.Exp)_4,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LET decs IN END 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		
		RESULT = new Absyn.LetExp(
			(scala.List<Absyn.Dec>)_2, 
			new Absyn.UnitExp(P()),
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= FOR id ASSIGN exp TO exp DO exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _6 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _8left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _8right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _8 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.ForExp(
			(scala.Symbol)_2,
			false,
			(Absyn.Exp)_4,
			(Absyn.Exp)_6,
			(Absyn.Exp)_8,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= WHILE exp DO exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.WhileExp(
			(Absyn.Exp)_2,
			(Absyn.Exp)_4,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= IF exp THEN exp ELSE exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _6 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.IfExp(
			(Absyn.Exp)_2,
			(Absyn.Exp)_4,
			(Absyn.Exp)_6,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= IF exp THEN exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.IfExp(
			(Absyn.Exp)_2,
			(Absyn.Exp)_4,
			null,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= id LPAREN args RPAREN 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.CallExp(
			(scala.Symbol)_1,
			(scala.List<Absyn.Exp>)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = (Absyn.Exp)_2;
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= MINUS exp 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			new Absyn.IntExp(0, P()),
			new Absyn.MinusOp(P()),
			(Absyn.Exp)_2,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp DIVIDE exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.DivideOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp TIMES exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.TimesOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp MINUS exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.MinusOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp PLUS exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.PlusOp(P()),
			(Absyn.Exp)_3, P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp NEQ exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.NeqOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GE exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.GeOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp GT exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.GtOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LE exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.LeOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp LT exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.LtOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp EQ exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.OpExp(
			(Absyn.Exp)_1,
			new Absyn.EqOp(P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp AND exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.IfExp(
			(Absyn.Exp)_1,
			(Absyn.Exp)_3,
			new Absyn.IntExp(0, P()),
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp OR exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.IfExp(
			(Absyn.Exp)_1,
			new Absyn.IntExp(1, P()),
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= LPAREN exp SEMICOLON explist RPAREN 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
		RESULT = new Absyn.SeqExp(
			Absyn.addList(
				(Absyn.Exp)_2,
				(scala.List<Absyn.Exp>)_4
			),
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= l_value ASSIGN exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.AssignExp(
			(Absyn.Var)_1,
			(Absyn.Exp)_3,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= l_value 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.VarExp(
			(Absyn.Var)_1,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= BREAK 
            {
              Object RESULT = null;
		
		RESULT = new Absyn.BreakExp(
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= STRING 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.StringExp(
			_1,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= NIL 
            {
              Object RESULT = null;
		
		RESULT = new Absyn.NilExp(
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= LPAREN RPAREN 
            {
              Object RESULT = null;
		
		RESULT = new Absyn.UnitExp(
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= INT 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = new Absyn.IntExp(
			_1,
			P()
		);
	
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		RESULT = _1;
	
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

